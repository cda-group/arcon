{
  "id": "touchpad_sender",
  "target": "x86-64-unknown-linux-gnu",
  "mode": "debug",
  "nodes": [
    {
      "id": 0,
      "parallelism": 1,
      "kind": {
        "Source": {
          "source_type": {
            "Struct": {
              "id": "struct_source_0_task_0_task_1_task_2_task_3_0",
              "field_tys": [
                {
                  "Scalar": "I64"
                },
                {
                  "Scalar": "F64"
                },
                {
                  "Scalar": "F64"
                },
                {
                  "Scalar": "F64"
                }
              ]
            }
          },
          "format": "CSV",
          "channel_strategy": "Forward",
          "successors": [
            {
              "Local": {
                "id": "node123"
              }
            }
          ],
          "kind": {
            "Socket": {
              "addr": "127.0.0.1:8000"
            }
          }
        }
      }
    },
    {
      "id": 0123,
      "parallelism": 1,
      "kind": {
        "Task": {
          "weld_code": "|se:{i64,f64,f64,f64}|\n  ( let sb:appender[{{i64,i64},f64}]=appender[{{i64,i64},f64}];\n    let anon_0:appender[{{i64,i64},f64}]=if (let obj101:{i64,f64,f64,f64}=se:{i64,f64,f64,f64};\nlet obj102:f64=(obj101.$3):f64;\n          let obj103:bool=(obj102:f64>f64(0.0)):bool;\n          let obj104:f64=(obj101.$3):f64;\n          let obj105:bool=(obj104:f64<f64(1.0)):bool;\n          let obj106:bool=(obj103:bool&&obj105:bool):bool;\n          obj106,\n          (|sb:appender[{{i64,i64},f64}],si:i64,se:{i64,f64,f64,f64}|\n  (|sb:appender[{{i64,i64},f64}],si:i64,se:{f64,f64,f64}|\n  (|sb:appender[{{i64,i64},f64}],si:i64,se:{{i64,i64},f64}|\n  merge(sb,let obj120:{{i64,i64},f64}=se:{{i64,i64},f64};\nlet obj121:{i64,i64}=(obj120.$0):{i64,i64};\n                  let obj122:f64=(obj120.$1):f64;\n                  let obj123:f64=(obj122:f64+f64(0.1)):f64;\n                  let obj124:{{i64,i64},f64}={obj121,obj123}:{{i64,i64},f64};\n                  obj124):appender[{{i64,i64},f64}])(sb,0L,let obj110:{f64,f64,f64}=se:{f64,f64,f64};\nlet obj111:f64=(obj110.$0):f64;\n                let obj112:f64=(obj111:f64/f64(166L)):f64;\n                let obj113:i64=i64(obj112);\n                let obj114:f64=(obj110.$1):f64;\n                let obj115:f64=(obj114:f64/f64(60L)):f64;\n                let obj116:i64=i64(obj115);\n                let obj117:f64=(obj110.$2):f64;\n                let obj118:{i64,i64}={obj113,obj116}:{i64,i64};\n                let obj119:{{i64,i64},f64}={obj118,obj117}:{{i64,i64},f64};\n                obj119):appender[{{i64,i64},f64}])(sb,0L,let obj107:{i64,f64,f64,f64}=se:{i64,f64,f64,f64};\nlet obj108:{f64,f64,f64}={obj107.$1,obj107.$2,obj107.$3}:{f64,f64,f64};\n              obj108):appender[{{i64,i64},f64}])(sb,0L,se):appender[{{i64,i64},f64}],\n          sb:appender[{{i64,i64},f64}]\n      ):appender[{{i64,i64},f64}];\n    result(anon_0)\n  ):vec[{{i64,i64},f64}]",
          "input_type": {
            "Struct": {
              "id": "struct_source_0_task_0_task_1_task_2_task_3_0",
              "field_tys": [
                {
                  "Scalar": "I64"
                },
                {
                  "Scalar": "F64"
                },
                {
                  "Scalar": "F64"
                },
                {
                  "Scalar": "F64"
                }
              ]
            }
          },
          "output_type": {
            "Struct": {
              "id": "struct_task_0_task_1_task_2_task_3_task_4_0",
              "field_tys": [
                {
                  "Struct": {
                    "id": "struct_task_0_task_1_task_2_task_3_task_4_1",
                    "field_tys": [
                      {
                        "Scalar": "I64"
                      },
                      {
                        "Scalar": "I64"
                      }
                    ]
                  }
                },
                {
                  "Scalar": "F64"
                }
              ]
            }
          },
          "channel_strategy": "Forward",
          "predecessor": "source_0",
          "successors": [
            {
              "Local": {
                "id": "node4"
              }
            }
          ],
          "kind": "FlatMap"
        }
      }
    },
    {
      "id": 4,
      "parallelism": 1,
      "kind": {
        "Window": {
          "channel_strategy": "Forward",
          "predecessor": 0123,
          "successors": [
            {
              "Local": {
                "id": "node5"
              }
            }
          ],
          "assigner": {
            "Tumbling": {
              "length": 6000
            }
          },
          "window_function": {
            "input_type": {
              "Struct": {
                "id": "struct_task_0_task_1_task_2_task_3_task_4_0",
                "field_tys": [
                  {
                    "Struct": {
                      "id": "struct_task_0_task_1_task_2_task_3_task_4_1",
                      "field_tys": [
                        {
                          "Scalar": "I64"
                        },
                        {
                          "Scalar": "I64"
                        }
                      ]
                    }
                  },
                  {
                    "Scalar": "F64"
                  }
                ]
              }
            },
            "output_type": {
              "Vector": {
                "elem_ty": {
                  "Struct": {
                    "id": "struct_task_4_task_5_0",
                    "field_tys": [
                      {
                        "Struct": {
                          "id": "struct_task_4_task_5_1",
                          "field_tys": [
                            {
                              "Scalar": "I64"
                            },
                            {
                              "Scalar": "I64"
                            }
                          ]
                        }
                      },
                      {
                        "Scalar": "F64"
                      }
                    ]
                  }
                }
              }
            },
            "builder_type": {
              "Appender": {
                "elem_ty": {
                  "Struct": {
                    "id": "struct_0_0",
                    "field_tys": [
                      {
                        "Struct": {
                          "id": "struct_0_1",
                          "field_tys": [
                            {
                              "Scalar": "I64"
                            },
                            {
                              "Scalar": "I64"
                            }
                          ]
                        }
                      },
                      {
                        "Scalar": "F64"
                      }
                    ]
                  }
                }
              }
            },
            "builder": "||appender[{{i64,i64},f64}]",
            "udf": "|se:{{i64,i64},f64},sb:appender[{{i64,i64},f64}]|\n  merge(sb,se):appender[{{i64,i64},f64}]",
            "materialiser": "|agg:appender[{{i64,i64},f64}]|\n  result(agg):vec[{{i64,i64},f64}]"
          },
          "time_kind": "Ingestion",
          "window_kind": "All"
        }
      }
    },
    {
      "id": 5,
      "parallelism": 1,
      "kind": {
        "Task": {
          "weld_code": "|se:vec[{{i64,i64},f64}]|\n  ( let groups:vec[{{i64,i64},vec[f64]}]=tovec(result(for(se:vec[{{i64,i64},f64}],\n    groupmerger[{i64,i64},f64],\n    |b:groupmerger[{i64,i64},f64],i:i64,e:{{i64,i64},f64}|\n              merge(b,e):groupmerger[{i64,i64},f64]\n)));\n    let keyvals:vec[{{i64,i64},f64}]=result(for(groups:vec[{{i64,i64},vec[f64]}],\n    appender[{{i64,i64},f64}],\n    |gb:appender[{{i64,i64},f64}],gi:i64,ge:{{i64,i64},vec[f64]}|\n              merge(gb,{ge.$0,let obj127:vec[f64]=(ge.$1):vec[f64];\nlet obj130:f64=result(for(obj127:vec[f64],\n    merger[f64,+],\n    |b:merger[f64,+],i:i64,e:f64|\n                           merge(b,e):merger[f64,+]\n)):f64;\n                 obj130}):appender[{{i64,i64},f64}]\n)):vec[{{i64,i64},f64}];\n    keyvals\n  ):vec[{{i64,i64},f64}]",
          "input_type": {
            "Vector": {
              "elem_ty": {
                "Struct": {
                  "id": "struct_task_4_task_5_0",
                  "field_tys": [
                    {
                      "Struct": {
                        "id": "struct_task_4_task_5_1",
                        "field_tys": [
                          {
                            "Scalar": "I64"
                          },
                          {
                            "Scalar": "I64"
                          }
                        ]
                      }
                    },
                    {
                      "Scalar": "F64"
                    }
                  ]
                }
              }
            }
          },
          "output_type": {
            "Vector": {
              "elem_ty": {
                "Struct": {
                  "id": "struct_task_5_sink_0_0",
                  "field_tys": [
                    {
                      "Struct": {
                        "id": "struct_task_5_sink_0_1",
                        "field_tys": [
                          {
                            "Scalar": "I64"
                          },
                          {
                            "Scalar": "I64"
                          }
                        ]
                      }
                    },
                    {
                      "Scalar": "F64"
                    }
                  ]
                }
              }
            }
          },
          "channel_strategy": "Forward",
          "predecessor": 4,
          "successors": [
            {
              "Local": {
                "id": "node0"
              }
            }
          ],
          "kind": "Map"
        }
      }
    },
    {
      "id": 0,
      "parallelism": 1,
      "kind": {
        "Sink": {
          "sink_type": {
            "Vector": {
              "elem_ty": {
                "Struct": {
                  "id": "struct_task_5_sink_0_0",
                  "field_tys": [
                    {
                      "Struct": {
                        "id": "struct_task_5_sink_0_1",
                        "field_tys": [
                          {
                            "Scalar": "I64"
                          },
                          {
                            "Scalar": "I64"
                          }
                        ]
                      }
                    },
                    {
                      "Scalar": "F64"
                    }
                  ]
                }
              }
            }
          },
          "format": "CSV",
          "predecessor": "task_5",
          "kind": {
            "Socket": {
              "addr": "127.0.0.1:9000"
            }
          }
        }
      }
    }
  ],
  "timestamp_extractor": 0
}

// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `messages.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct Element {
    // message fields
    pub timestamp: u64,
    pub data: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Element {
    fn default() -> &'a Element {
        <Element as ::protobuf::Message>::default_instance()
    }
}

impl Element {
    pub fn new() -> Element {
        ::std::default::Default::default()
    }

    // uint64 timestamp = 1;


    pub fn get_timestamp(&self) -> u64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = v;
    }

    // bytes data = 2;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Element {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(1, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.timestamp != 0 {
            os.write_uint64(1, self.timestamp)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(2, &self.data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Element {
        Element::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "timestamp",
                    |m: &Element| { &m.timestamp },
                    |m: &mut Element| { &mut m.timestamp },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "data",
                    |m: &Element| { &m.data },
                    |m: &mut Element| { &mut m.data },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Element>(
                    "Element",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Element {
        static mut instance: ::protobuf::lazy::Lazy<Element> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Element,
        };
        unsafe {
            instance.get(Element::new)
        }
    }
}

impl ::protobuf::Clear for Element {
    fn clear(&mut self) {
        self.timestamp = 0;
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Element {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Element {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Checkpoint {
    // message fields
    pub epoch: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Checkpoint {
    fn default() -> &'a Checkpoint {
        <Checkpoint as ::protobuf::Message>::default_instance()
    }
}

impl Checkpoint {
    pub fn new() -> Checkpoint {
        ::std::default::Default::default()
    }

    // uint64 epoch = 1;


    pub fn get_epoch(&self) -> u64 {
        self.epoch
    }
    pub fn clear_epoch(&mut self) {
        self.epoch = 0;
    }

    // Param is passed by value, moved
    pub fn set_epoch(&mut self, v: u64) {
        self.epoch = v;
    }
}

impl ::protobuf::Message for Checkpoint {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.epoch = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.epoch != 0 {
            my_size += ::protobuf::rt::value_size(1, self.epoch, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.epoch != 0 {
            os.write_uint64(1, self.epoch)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Checkpoint {
        Checkpoint::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "epoch",
                    |m: &Checkpoint| { &m.epoch },
                    |m: &mut Checkpoint| { &mut m.epoch },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Checkpoint>(
                    "Checkpoint",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Checkpoint {
        static mut instance: ::protobuf::lazy::Lazy<Checkpoint> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Checkpoint,
        };
        unsafe {
            instance.get(Checkpoint::new)
        }
    }
}

impl ::protobuf::Clear for Checkpoint {
    fn clear(&mut self) {
        self.epoch = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Checkpoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Checkpoint {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Watermark {
    // message fields
    pub timestamp: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Watermark {
    fn default() -> &'a Watermark {
        <Watermark as ::protobuf::Message>::default_instance()
    }
}

impl Watermark {
    pub fn new() -> Watermark {
        ::std::default::Default::default()
    }

    // uint64 timestamp = 1;


    pub fn get_timestamp(&self) -> u64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = v;
    }
}

impl ::protobuf::Message for Watermark {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(1, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.timestamp != 0 {
            os.write_uint64(1, self.timestamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Watermark {
        Watermark::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "timestamp",
                    |m: &Watermark| { &m.timestamp },
                    |m: &mut Watermark| { &mut m.timestamp },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Watermark>(
                    "Watermark",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Watermark {
        static mut instance: ::protobuf::lazy::Lazy<Watermark> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Watermark,
        };
        unsafe {
            instance.get(Watermark::new)
        }
    }
}

impl ::protobuf::Clear for Watermark {
    fn clear(&mut self) {
        self.timestamp = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Watermark {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Watermark {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ArconNetworkMessage {
    // message fields
    pub sender: u32,
    // message oneof groups
    pub payload: ::std::option::Option<ArconNetworkMessage_oneof_payload>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ArconNetworkMessage {
    fn default() -> &'a ArconNetworkMessage {
        <ArconNetworkMessage as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ArconNetworkMessage_oneof_payload {
    element(Element),
    watermark(Watermark),
    checkpoint(Checkpoint),
}

impl ArconNetworkMessage {
    pub fn new() -> ArconNetworkMessage {
        ::std::default::Default::default()
    }

    // uint32 sender = 1;


    pub fn get_sender(&self) -> u32 {
        self.sender
    }
    pub fn clear_sender(&mut self) {
        self.sender = 0;
    }

    // Param is passed by value, moved
    pub fn set_sender(&mut self, v: u32) {
        self.sender = v;
    }

    // .Element element = 2;


    pub fn get_element(&self) -> &Element {
        match self.payload {
            ::std::option::Option::Some(ArconNetworkMessage_oneof_payload::element(ref v)) => v,
            _ => Element::default_instance(),
        }
    }
    pub fn clear_element(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_element(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(ArconNetworkMessage_oneof_payload::element(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_element(&mut self, v: Element) {
        self.payload = ::std::option::Option::Some(ArconNetworkMessage_oneof_payload::element(v))
    }

    // Mutable pointer to the field.
    pub fn mut_element(&mut self) -> &mut Element {
        if let ::std::option::Option::Some(ArconNetworkMessage_oneof_payload::element(_)) = self.payload {
        } else {
            self.payload = ::std::option::Option::Some(ArconNetworkMessage_oneof_payload::element(Element::new()));
        }
        match self.payload {
            ::std::option::Option::Some(ArconNetworkMessage_oneof_payload::element(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_element(&mut self) -> Element {
        if self.has_element() {
            match self.payload.take() {
                ::std::option::Option::Some(ArconNetworkMessage_oneof_payload::element(v)) => v,
                _ => panic!(),
            }
        } else {
            Element::new()
        }
    }

    // .Watermark watermark = 3;


    pub fn get_watermark(&self) -> &Watermark {
        match self.payload {
            ::std::option::Option::Some(ArconNetworkMessage_oneof_payload::watermark(ref v)) => v,
            _ => Watermark::default_instance(),
        }
    }
    pub fn clear_watermark(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_watermark(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(ArconNetworkMessage_oneof_payload::watermark(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_watermark(&mut self, v: Watermark) {
        self.payload = ::std::option::Option::Some(ArconNetworkMessage_oneof_payload::watermark(v))
    }

    // Mutable pointer to the field.
    pub fn mut_watermark(&mut self) -> &mut Watermark {
        if let ::std::option::Option::Some(ArconNetworkMessage_oneof_payload::watermark(_)) = self.payload {
        } else {
            self.payload = ::std::option::Option::Some(ArconNetworkMessage_oneof_payload::watermark(Watermark::new()));
        }
        match self.payload {
            ::std::option::Option::Some(ArconNetworkMessage_oneof_payload::watermark(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_watermark(&mut self) -> Watermark {
        if self.has_watermark() {
            match self.payload.take() {
                ::std::option::Option::Some(ArconNetworkMessage_oneof_payload::watermark(v)) => v,
                _ => panic!(),
            }
        } else {
            Watermark::new()
        }
    }

    // .Checkpoint checkpoint = 4;


    pub fn get_checkpoint(&self) -> &Checkpoint {
        match self.payload {
            ::std::option::Option::Some(ArconNetworkMessage_oneof_payload::checkpoint(ref v)) => v,
            _ => Checkpoint::default_instance(),
        }
    }
    pub fn clear_checkpoint(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_checkpoint(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(ArconNetworkMessage_oneof_payload::checkpoint(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_checkpoint(&mut self, v: Checkpoint) {
        self.payload = ::std::option::Option::Some(ArconNetworkMessage_oneof_payload::checkpoint(v))
    }

    // Mutable pointer to the field.
    pub fn mut_checkpoint(&mut self) -> &mut Checkpoint {
        if let ::std::option::Option::Some(ArconNetworkMessage_oneof_payload::checkpoint(_)) = self.payload {
        } else {
            self.payload = ::std::option::Option::Some(ArconNetworkMessage_oneof_payload::checkpoint(Checkpoint::new()));
        }
        match self.payload {
            ::std::option::Option::Some(ArconNetworkMessage_oneof_payload::checkpoint(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_checkpoint(&mut self) -> Checkpoint {
        if self.has_checkpoint() {
            match self.payload.take() {
                ::std::option::Option::Some(ArconNetworkMessage_oneof_payload::checkpoint(v)) => v,
                _ => panic!(),
            }
        } else {
            Checkpoint::new()
        }
    }
}

impl ::protobuf::Message for ArconNetworkMessage {
    fn is_initialized(&self) -> bool {
        if let Some(ArconNetworkMessage_oneof_payload::element(ref v)) = self.payload {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ArconNetworkMessage_oneof_payload::watermark(ref v)) = self.payload {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ArconNetworkMessage_oneof_payload::checkpoint(ref v)) = self.payload {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.sender = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.payload = ::std::option::Option::Some(ArconNetworkMessage_oneof_payload::element(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.payload = ::std::option::Option::Some(ArconNetworkMessage_oneof_payload::watermark(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.payload = ::std::option::Option::Some(ArconNetworkMessage_oneof_payload::checkpoint(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.sender != 0 {
            my_size += ::protobuf::rt::value_size(1, self.sender, ::protobuf::wire_format::WireTypeVarint);
        }
        if let ::std::option::Option::Some(ref v) = self.payload {
            match v {
                &ArconNetworkMessage_oneof_payload::element(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ArconNetworkMessage_oneof_payload::watermark(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ArconNetworkMessage_oneof_payload::checkpoint(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.sender != 0 {
            os.write_uint32(1, self.sender)?;
        }
        if let ::std::option::Option::Some(ref v) = self.payload {
            match v {
                &ArconNetworkMessage_oneof_payload::element(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ArconNetworkMessage_oneof_payload::watermark(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ArconNetworkMessage_oneof_payload::checkpoint(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ArconNetworkMessage {
        ArconNetworkMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "sender",
                    |m: &ArconNetworkMessage| { &m.sender },
                    |m: &mut ArconNetworkMessage| { &mut m.sender },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Element>(
                    "element",
                    ArconNetworkMessage::has_element,
                    ArconNetworkMessage::get_element,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Watermark>(
                    "watermark",
                    ArconNetworkMessage::has_watermark,
                    ArconNetworkMessage::get_watermark,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Checkpoint>(
                    "checkpoint",
                    ArconNetworkMessage::has_checkpoint,
                    ArconNetworkMessage::get_checkpoint,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ArconNetworkMessage>(
                    "ArconNetworkMessage",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ArconNetworkMessage {
        static mut instance: ::protobuf::lazy::Lazy<ArconNetworkMessage> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ArconNetworkMessage,
        };
        unsafe {
            instance.get(ArconNetworkMessage::new)
        }
    }
}

impl ::protobuf::Clear for ArconNetworkMessage {
    fn clear(&mut self) {
        self.sender = 0;
        self.payload = ::std::option::Option::None;
        self.payload = ::std::option::Option::None;
        self.payload = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ArconNetworkMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ArconNetworkMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0emessages.proto\";\n\x07Element\x12\x1c\n\ttimestamp\x18\x01\x20\
    \x01(\x04R\ttimestamp\x12\x12\n\x04data\x18\x02\x20\x01(\x0cR\x04data\"\
    \"\n\nCheckpoint\x12\x14\n\x05epoch\x18\x01\x20\x01(\x04R\x05epoch\")\n\
    \tWatermark\x12\x1c\n\ttimestamp\x18\x01\x20\x01(\x04R\ttimestamp\"\xb9\
    \x01\n\x13ArconNetworkMessage\x12\x16\n\x06sender\x18\x01\x20\x01(\rR\
    \x06sender\x12$\n\x07element\x18\x02\x20\x01(\x0b2\x08.ElementH\0R\x07el\
    ement\x12*\n\twatermark\x18\x03\x20\x01(\x0b2\n.WatermarkH\0R\twatermark\
    \x12-\n\ncheckpoint\x18\x04\x20\x01(\x0b2\x0b.CheckpointH\0R\ncheckpoint\
    B\t\n\x07payloadb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
